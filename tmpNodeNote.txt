 //tmp is for mempry managemnt, your not actually changing or using it, just used to 
//store memloc of p-> next, then freeing it delets that node

**
void DelFromEnd(NodeType **L){
  //deleting from end of empty list
  if ((*L)==NULL)  {
     fprintf(stderr,"cannot delete from empty list\n");
     return ;
  } 
  //deleting from end of 1-node list
  if (((*L)->next)==NULL) {
    NodeType *tmp=*L;
    *L=NULL;
    free(tmp);
    return ;
  }
  //deleting from end of multi-node list
  NodeType *p=*L;
  while ((p->next->next)!=NULL) //traverse until p points to 2nd last node (set p to seconds last node)
      p=p->next; 
  //XXXXXXX
  //tmp is for mempry managemnt, your not actually changing or using it, just used to 
  //store memloc of p-> next, then freeing it delets that node
NodeType *tmp = p->next;
p->next = NULL;
free(tmp);
  return ;
}


How the while Loop Works Step-by-Step
Example: Given List
css
Copy code
[10] -> [20] -> [30] -> [40] -> NULL
Initial State:

p points to [10].
Iteration 1:

p->next->next points to [30] (not NULL).
Move p to [20].
Iteration 2:

p->next->next points to [40] (not NULL).
Move p to [30].
Iteration 3:

p->next->next points to NULL (end of the list).
Stop the loop.
Now, p points to [30] (second-to-last node).
